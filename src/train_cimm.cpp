/*****************************************************************************
 * This is the main of the train_cimm program. It trains a context
 * IMM model using a set of sequences given as input. It can compute a non-
 * homogeneous cIMM if more than one context is given as an argument. It can
 * also produce markov chains of an arbitrary order
 *
 *   Copyright (C) 2002-2007  Axel E. Bernal (abernal@seas.upenn.edu)
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License as
 *   published by the Free Software Foundation; either version 2 of the
 *   License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful, but
 *   WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 *   02111-1307, USA.
 *
 *   The GNU General Public License is contained in the file COPYING.
 *
 ****************************************************************************/


#include <string.h>
#include <math.h>
#include "Utils.h"
#include "IMM.h"
#include <stdlib.h>
#include <iostream>
#include <iomanip>
#include <sys/stat.h>
#include "Sequence.h"
#include "ContextIMM.h"
#include "Organism.h"
#include "FilterEngine.h"
#include "IMM.h"
#include "ArgParseUtils.h"

void printHelp(const char * pname, ::ofstream &fd) {
    fd << "CRAIG v. " << CRAIG_VERSION << " tool for training a context IMM given an input sequence.\n";
    fd << "Written by Axel E. Bernal (" << AUTHOR_EMAIL << ")\n\n";
    fd << "Usage :" << pname << " [options] CIMM_MODEL > SEQUENCE\n\n";
    fd << "positional arguments:\n";
    ArgParseUtils::displayOption(fd, "CIMM_MODEL", "Name of the file containing the model generated with train_content_sensor");
    fd << "optional arguments:\n";
    ArgParseUtils::displayOption(fd, "--version", "Print version name and license information");
    ArgParseUtils::displayOption(fd, "-h --help", "Show this message and exit");
    ArgParseUtils::displayOption(fd, "-v --verbose", "Turns on output of debugging information");
    ArgParseUtils::displayOption(fd, "--length=LENGTH", "Length of the emited sequence [1000]");
    ArgParseUtils::displayOption(fd, "--num-subchains=NUM_SUBCHAINS", "The number of cIMM sub-chains. If larger than 1 then the resulting model is a non-homogeneous context IMM [3]");
    ArgParseUtils::displayOption(fd, "--max-order=MAX_ORDER", "Maximum order for interpolation [9]\n");
    ArgParseUtils::displayOption(fd, "SEQUENCE", "The sequence generated by cimm_model");
    ArgParseUtils::displayOption(fd, "--model=MODEL", "Name of file for the output CIMM model [stdout]");
    fd << "Report bugs to <" << AUTHOR_EMAIL << ">\n";
}

bool verbose = false;

int main(int argc, char *argv[]) {

    int minOrder = 1, maxOrder = 9, numSubChains = 3, i;
    std::string gcString;
    std::string modelFile = "";
    std::string annotSeqFile = "";
    ::ofstream immStream;

    try {

        for(i = 1; i < argc; i++) {
            if(!strncmp(argv[i], "--model=", 8)) {
                modelFile = std::string(argv[i] + 8);
            }
            else if(!strncmp(argv[i], "--verbose", 9)
                    || !strncmp(argv[i], "-v", 2)) {
                verbose = true;
            }
            else if(!strncmp(argv[i], "--help", 6)
                    || !strncmp(argv[i], "-h", 2)) {
                printHelp("train_cimm", (std::ofstream &)cout);
                exit(0);
            }
            else if(!strncmp(argv[i], "--version", 9)) {
                PRINT_VERSION(cerr, "train_cimm", "tool for training a context IMM given an input sequence");
                PRINT_DISCLAIMER(cerr, "train_cimm");
                exit(0);
            }
            else if(!strncmp(argv[i], "--contexts=", 11)) {
                gcString = std::string(argv[i] + 11);
            }
            else if(!strncmp(argv[i], "--num-subchains=", 16)) {
                sscanf(argv[i] + 16, "%d", &numSubChains);
            }
            else if(!strncmp(argv[i], "--max-order=", 12)) {
                sscanf(argv[i] + 12, "%d", &maxOrder);
            }
            else
                break;
        }

        if(argc - i < 1)
            throw EXCEPTION(BAD_USAGE, "insufficient arguments");

        if(numSubChains < 0 || maxOrder < 1 || maxOrder > 9)
            throw EXCEPTION(BAD_USAGE, "numeric parameter(s) is(are) out of bounds");

        annotSeqFile = std::string(argv[i++]);

        DNASigma sigma;
        // creating the organism
        ContextIMM cimm(annotSeqFile.c_str(), gcString, numSubChains, minOrder, maxOrder, 50000, &sigma);
        if(modelFile.length()) {
            immStream.open(modelFile.c_str());

            if(!immStream.is_open())
                throw EXCEPTION(FILE_UNAVAILABLE, modelFile);

            cimm.saveContents(immStream);
            immStream.close();
        }
        else
            cimm.saveContents((std::ofstream &)cout);

    } catch(exception *e) {
        perror(e->what());

        GenLibExcept *gle = (GenLibExcept *)e;
        if(gle->error() == BAD_USAGE)
            cerr << "use --help for more information\n";

        delete e;
        exit(1);
    }
}
